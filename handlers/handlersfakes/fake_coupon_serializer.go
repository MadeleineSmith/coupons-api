// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/madeleinesmith/coupons/handlers"
	"github.com/madeleinesmith/coupons/model/coupon"
)

type FakeCouponSerializer struct {
	DeserializeStub        func([]byte) (coupon.Coupon, error)
	deserializeMutex       sync.RWMutex
	deserializeArgsForCall []struct {
		arg1 []byte
	}
	deserializeReturns struct {
		result1 coupon.Coupon
		result2 error
	}
	deserializeReturnsOnCall map[int]struct {
		result1 coupon.Coupon
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCouponSerializer) Deserialize(arg1 []byte) (coupon.Coupon, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deserializeMutex.Lock()
	ret, specificReturn := fake.deserializeReturnsOnCall[len(fake.deserializeArgsForCall)]
	fake.deserializeArgsForCall = append(fake.deserializeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Deserialize", []interface{}{arg1Copy})
	fake.deserializeMutex.Unlock()
	if fake.DeserializeStub != nil {
		return fake.DeserializeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deserializeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponSerializer) DeserializeCallCount() int {
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	return len(fake.deserializeArgsForCall)
}

func (fake *FakeCouponSerializer) DeserializeCalls(stub func([]byte) (coupon.Coupon, error)) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = stub
}

func (fake *FakeCouponSerializer) DeserializeArgsForCall(i int) []byte {
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	argsForCall := fake.deserializeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponSerializer) DeserializeReturns(result1 coupon.Coupon, result2 error) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = nil
	fake.deserializeReturns = struct {
		result1 coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) DeserializeReturnsOnCall(i int, result1 coupon.Coupon, result2 error) {
	fake.deserializeMutex.Lock()
	defer fake.deserializeMutex.Unlock()
	fake.DeserializeStub = nil
	if fake.deserializeReturnsOnCall == nil {
		fake.deserializeReturnsOnCall = make(map[int]struct {
			result1 coupon.Coupon
			result2 error
		})
	}
	fake.deserializeReturnsOnCall[i] = struct {
		result1 coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deserializeMutex.RLock()
	defer fake.deserializeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCouponSerializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.CouponSerializer = new(FakeCouponSerializer)
