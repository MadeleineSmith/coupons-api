// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/madeleinesmith/coupons/handlers"
	"github.com/madeleinesmith/coupons/model/coupon"
)

type FakeCouponSerializer struct {
	DeserializeCouponStub        func([]byte) (coupon.Coupon, error)
	deserializeCouponMutex       sync.RWMutex
	deserializeCouponArgsForCall []struct {
		arg1 []byte
	}
	deserializeCouponReturns struct {
		result1 coupon.Coupon
		result2 error
	}
	deserializeCouponReturnsOnCall map[int]struct {
		result1 coupon.Coupon
		result2 error
	}
	SerializeCouponStub        func(*coupon.Coupon) ([]byte, error)
	serializeCouponMutex       sync.RWMutex
	serializeCouponArgsForCall []struct {
		arg1 *coupon.Coupon
	}
	serializeCouponReturns struct {
		result1 []byte
		result2 error
	}
	serializeCouponReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SerializeCouponsStub        func([]*coupon.Coupon) ([]byte, error)
	serializeCouponsMutex       sync.RWMutex
	serializeCouponsArgsForCall []struct {
		arg1 []*coupon.Coupon
	}
	serializeCouponsReturns struct {
		result1 []byte
		result2 error
	}
	serializeCouponsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCouponSerializer) DeserializeCoupon(arg1 []byte) (coupon.Coupon, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deserializeCouponMutex.Lock()
	ret, specificReturn := fake.deserializeCouponReturnsOnCall[len(fake.deserializeCouponArgsForCall)]
	fake.deserializeCouponArgsForCall = append(fake.deserializeCouponArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("DeserializeCoupon", []interface{}{arg1Copy})
	fake.deserializeCouponMutex.Unlock()
	if fake.DeserializeCouponStub != nil {
		return fake.DeserializeCouponStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deserializeCouponReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponSerializer) DeserializeCouponCallCount() int {
	fake.deserializeCouponMutex.RLock()
	defer fake.deserializeCouponMutex.RUnlock()
	return len(fake.deserializeCouponArgsForCall)
}

func (fake *FakeCouponSerializer) DeserializeCouponCalls(stub func([]byte) (coupon.Coupon, error)) {
	fake.deserializeCouponMutex.Lock()
	defer fake.deserializeCouponMutex.Unlock()
	fake.DeserializeCouponStub = stub
}

func (fake *FakeCouponSerializer) DeserializeCouponArgsForCall(i int) []byte {
	fake.deserializeCouponMutex.RLock()
	defer fake.deserializeCouponMutex.RUnlock()
	argsForCall := fake.deserializeCouponArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponSerializer) DeserializeCouponReturns(result1 coupon.Coupon, result2 error) {
	fake.deserializeCouponMutex.Lock()
	defer fake.deserializeCouponMutex.Unlock()
	fake.DeserializeCouponStub = nil
	fake.deserializeCouponReturns = struct {
		result1 coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) DeserializeCouponReturnsOnCall(i int, result1 coupon.Coupon, result2 error) {
	fake.deserializeCouponMutex.Lock()
	defer fake.deserializeCouponMutex.Unlock()
	fake.DeserializeCouponStub = nil
	if fake.deserializeCouponReturnsOnCall == nil {
		fake.deserializeCouponReturnsOnCall = make(map[int]struct {
			result1 coupon.Coupon
			result2 error
		})
	}
	fake.deserializeCouponReturnsOnCall[i] = struct {
		result1 coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) SerializeCoupon(arg1 *coupon.Coupon) ([]byte, error) {
	fake.serializeCouponMutex.Lock()
	ret, specificReturn := fake.serializeCouponReturnsOnCall[len(fake.serializeCouponArgsForCall)]
	fake.serializeCouponArgsForCall = append(fake.serializeCouponArgsForCall, struct {
		arg1 *coupon.Coupon
	}{arg1})
	fake.recordInvocation("SerializeCoupon", []interface{}{arg1})
	fake.serializeCouponMutex.Unlock()
	if fake.SerializeCouponStub != nil {
		return fake.SerializeCouponStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.serializeCouponReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponSerializer) SerializeCouponCallCount() int {
	fake.serializeCouponMutex.RLock()
	defer fake.serializeCouponMutex.RUnlock()
	return len(fake.serializeCouponArgsForCall)
}

func (fake *FakeCouponSerializer) SerializeCouponCalls(stub func(*coupon.Coupon) ([]byte, error)) {
	fake.serializeCouponMutex.Lock()
	defer fake.serializeCouponMutex.Unlock()
	fake.SerializeCouponStub = stub
}

func (fake *FakeCouponSerializer) SerializeCouponArgsForCall(i int) *coupon.Coupon {
	fake.serializeCouponMutex.RLock()
	defer fake.serializeCouponMutex.RUnlock()
	argsForCall := fake.serializeCouponArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponSerializer) SerializeCouponReturns(result1 []byte, result2 error) {
	fake.serializeCouponMutex.Lock()
	defer fake.serializeCouponMutex.Unlock()
	fake.SerializeCouponStub = nil
	fake.serializeCouponReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) SerializeCouponReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.serializeCouponMutex.Lock()
	defer fake.serializeCouponMutex.Unlock()
	fake.SerializeCouponStub = nil
	if fake.serializeCouponReturnsOnCall == nil {
		fake.serializeCouponReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.serializeCouponReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) SerializeCoupons(arg1 []*coupon.Coupon) ([]byte, error) {
	var arg1Copy []*coupon.Coupon
	if arg1 != nil {
		arg1Copy = make([]*coupon.Coupon, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.serializeCouponsMutex.Lock()
	ret, specificReturn := fake.serializeCouponsReturnsOnCall[len(fake.serializeCouponsArgsForCall)]
	fake.serializeCouponsArgsForCall = append(fake.serializeCouponsArgsForCall, struct {
		arg1 []*coupon.Coupon
	}{arg1Copy})
	fake.recordInvocation("SerializeCoupons", []interface{}{arg1Copy})
	fake.serializeCouponsMutex.Unlock()
	if fake.SerializeCouponsStub != nil {
		return fake.SerializeCouponsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.serializeCouponsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponSerializer) SerializeCouponsCallCount() int {
	fake.serializeCouponsMutex.RLock()
	defer fake.serializeCouponsMutex.RUnlock()
	return len(fake.serializeCouponsArgsForCall)
}

func (fake *FakeCouponSerializer) SerializeCouponsCalls(stub func([]*coupon.Coupon) ([]byte, error)) {
	fake.serializeCouponsMutex.Lock()
	defer fake.serializeCouponsMutex.Unlock()
	fake.SerializeCouponsStub = stub
}

func (fake *FakeCouponSerializer) SerializeCouponsArgsForCall(i int) []*coupon.Coupon {
	fake.serializeCouponsMutex.RLock()
	defer fake.serializeCouponsMutex.RUnlock()
	argsForCall := fake.serializeCouponsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponSerializer) SerializeCouponsReturns(result1 []byte, result2 error) {
	fake.serializeCouponsMutex.Lock()
	defer fake.serializeCouponsMutex.Unlock()
	fake.SerializeCouponsStub = nil
	fake.serializeCouponsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) SerializeCouponsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.serializeCouponsMutex.Lock()
	defer fake.serializeCouponsMutex.Unlock()
	fake.SerializeCouponsStub = nil
	if fake.serializeCouponsReturnsOnCall == nil {
		fake.serializeCouponsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.serializeCouponsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponSerializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deserializeCouponMutex.RLock()
	defer fake.deserializeCouponMutex.RUnlock()
	fake.serializeCouponMutex.RLock()
	defer fake.serializeCouponMutex.RUnlock()
	fake.serializeCouponsMutex.RLock()
	defer fake.serializeCouponsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCouponSerializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.CouponSerializer = new(FakeCouponSerializer)
