// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/coupons/handlers"
	"github.com/coupons/model/coupon"
)

type FakeCouponService struct {
	CreateCouponStub        func(couponInstance coupon.Coupon)
	createCouponMutex       sync.RWMutex
	createCouponArgsForCall []struct {
		couponInstance coupon.Coupon
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCouponService) CreateCoupon(couponInstance coupon.Coupon) {
	fake.createCouponMutex.Lock()
	fake.createCouponArgsForCall = append(fake.createCouponArgsForCall, struct {
		couponInstance coupon.Coupon
	}{couponInstance})
	fake.recordInvocation("CreateCoupon", []interface{}{couponInstance})
	fake.createCouponMutex.Unlock()
	if fake.CreateCouponStub != nil {
		fake.CreateCouponStub(couponInstance)
	}
}

func (fake *FakeCouponService) CreateCouponCallCount() int {
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	return len(fake.createCouponArgsForCall)
}

func (fake *FakeCouponService) CreateCouponArgsForCall(i int) coupon.Coupon {
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	return fake.createCouponArgsForCall[i].couponInstance
}

func (fake *FakeCouponService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCouponService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.CouponService = new(FakeCouponService)
