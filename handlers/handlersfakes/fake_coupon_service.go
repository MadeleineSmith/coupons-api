// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/madeleinesmith/coupons/handlers"
	"github.com/madeleinesmith/coupons/model/coupon"
)

type FakeCouponService struct {
	CreateCouponStub        func(coupon.Coupon) (*coupon.Coupon, error)
	createCouponMutex       sync.RWMutex
	createCouponArgsForCall []struct {
		arg1 coupon.Coupon
	}
	createCouponReturns struct {
		result1 *coupon.Coupon
		result2 error
	}
	createCouponReturnsOnCall map[int]struct {
		result1 *coupon.Coupon
		result2 error
	}
	GetCouponByIdStub        func(string) (*coupon.Coupon, error)
	getCouponByIdMutex       sync.RWMutex
	getCouponByIdArgsForCall []struct {
		arg1 string
	}
	getCouponByIdReturns struct {
		result1 *coupon.Coupon
		result2 error
	}
	getCouponByIdReturnsOnCall map[int]struct {
		result1 *coupon.Coupon
		result2 error
	}
	GetCouponsStub        func(handlers.Filters) ([]*coupon.Coupon, error)
	getCouponsMutex       sync.RWMutex
	getCouponsArgsForCall []struct {
		arg1 handlers.Filters
	}
	getCouponsReturns struct {
		result1 []*coupon.Coupon
		result2 error
	}
	getCouponsReturnsOnCall map[int]struct {
		result1 []*coupon.Coupon
		result2 error
	}
	UpdateCouponStub        func(coupon.Coupon) error
	updateCouponMutex       sync.RWMutex
	updateCouponArgsForCall []struct {
		arg1 coupon.Coupon
	}
	updateCouponReturns struct {
		result1 error
	}
	updateCouponReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCouponService) CreateCoupon(arg1 coupon.Coupon) (*coupon.Coupon, error) {
	fake.createCouponMutex.Lock()
	ret, specificReturn := fake.createCouponReturnsOnCall[len(fake.createCouponArgsForCall)]
	fake.createCouponArgsForCall = append(fake.createCouponArgsForCall, struct {
		arg1 coupon.Coupon
	}{arg1})
	fake.recordInvocation("CreateCoupon", []interface{}{arg1})
	fake.createCouponMutex.Unlock()
	if fake.CreateCouponStub != nil {
		return fake.CreateCouponStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCouponReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponService) CreateCouponCallCount() int {
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	return len(fake.createCouponArgsForCall)
}

func (fake *FakeCouponService) CreateCouponCalls(stub func(coupon.Coupon) (*coupon.Coupon, error)) {
	fake.createCouponMutex.Lock()
	defer fake.createCouponMutex.Unlock()
	fake.CreateCouponStub = stub
}

func (fake *FakeCouponService) CreateCouponArgsForCall(i int) coupon.Coupon {
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	argsForCall := fake.createCouponArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponService) CreateCouponReturns(result1 *coupon.Coupon, result2 error) {
	fake.createCouponMutex.Lock()
	defer fake.createCouponMutex.Unlock()
	fake.CreateCouponStub = nil
	fake.createCouponReturns = struct {
		result1 *coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) CreateCouponReturnsOnCall(i int, result1 *coupon.Coupon, result2 error) {
	fake.createCouponMutex.Lock()
	defer fake.createCouponMutex.Unlock()
	fake.CreateCouponStub = nil
	if fake.createCouponReturnsOnCall == nil {
		fake.createCouponReturnsOnCall = make(map[int]struct {
			result1 *coupon.Coupon
			result2 error
		})
	}
	fake.createCouponReturnsOnCall[i] = struct {
		result1 *coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) GetCouponById(arg1 string) (*coupon.Coupon, error) {
	fake.getCouponByIdMutex.Lock()
	ret, specificReturn := fake.getCouponByIdReturnsOnCall[len(fake.getCouponByIdArgsForCall)]
	fake.getCouponByIdArgsForCall = append(fake.getCouponByIdArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetCouponById", []interface{}{arg1})
	fake.getCouponByIdMutex.Unlock()
	if fake.GetCouponByIdStub != nil {
		return fake.GetCouponByIdStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCouponByIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponService) GetCouponByIdCallCount() int {
	fake.getCouponByIdMutex.RLock()
	defer fake.getCouponByIdMutex.RUnlock()
	return len(fake.getCouponByIdArgsForCall)
}

func (fake *FakeCouponService) GetCouponByIdCalls(stub func(string) (*coupon.Coupon, error)) {
	fake.getCouponByIdMutex.Lock()
	defer fake.getCouponByIdMutex.Unlock()
	fake.GetCouponByIdStub = stub
}

func (fake *FakeCouponService) GetCouponByIdArgsForCall(i int) string {
	fake.getCouponByIdMutex.RLock()
	defer fake.getCouponByIdMutex.RUnlock()
	argsForCall := fake.getCouponByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponService) GetCouponByIdReturns(result1 *coupon.Coupon, result2 error) {
	fake.getCouponByIdMutex.Lock()
	defer fake.getCouponByIdMutex.Unlock()
	fake.GetCouponByIdStub = nil
	fake.getCouponByIdReturns = struct {
		result1 *coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) GetCouponByIdReturnsOnCall(i int, result1 *coupon.Coupon, result2 error) {
	fake.getCouponByIdMutex.Lock()
	defer fake.getCouponByIdMutex.Unlock()
	fake.GetCouponByIdStub = nil
	if fake.getCouponByIdReturnsOnCall == nil {
		fake.getCouponByIdReturnsOnCall = make(map[int]struct {
			result1 *coupon.Coupon
			result2 error
		})
	}
	fake.getCouponByIdReturnsOnCall[i] = struct {
		result1 *coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) GetCoupons(arg1 handlers.Filters) ([]*coupon.Coupon, error) {
	fake.getCouponsMutex.Lock()
	ret, specificReturn := fake.getCouponsReturnsOnCall[len(fake.getCouponsArgsForCall)]
	fake.getCouponsArgsForCall = append(fake.getCouponsArgsForCall, struct {
		arg1 handlers.Filters
	}{arg1})
	fake.recordInvocation("GetCoupons", []interface{}{arg1})
	fake.getCouponsMutex.Unlock()
	if fake.GetCouponsStub != nil {
		return fake.GetCouponsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCouponsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCouponService) GetCouponsCallCount() int {
	fake.getCouponsMutex.RLock()
	defer fake.getCouponsMutex.RUnlock()
	return len(fake.getCouponsArgsForCall)
}

func (fake *FakeCouponService) GetCouponsCalls(stub func(handlers.Filters) ([]*coupon.Coupon, error)) {
	fake.getCouponsMutex.Lock()
	defer fake.getCouponsMutex.Unlock()
	fake.GetCouponsStub = stub
}

func (fake *FakeCouponService) GetCouponsArgsForCall(i int) handlers.Filters {
	fake.getCouponsMutex.RLock()
	defer fake.getCouponsMutex.RUnlock()
	argsForCall := fake.getCouponsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponService) GetCouponsReturns(result1 []*coupon.Coupon, result2 error) {
	fake.getCouponsMutex.Lock()
	defer fake.getCouponsMutex.Unlock()
	fake.GetCouponsStub = nil
	fake.getCouponsReturns = struct {
		result1 []*coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) GetCouponsReturnsOnCall(i int, result1 []*coupon.Coupon, result2 error) {
	fake.getCouponsMutex.Lock()
	defer fake.getCouponsMutex.Unlock()
	fake.GetCouponsStub = nil
	if fake.getCouponsReturnsOnCall == nil {
		fake.getCouponsReturnsOnCall = make(map[int]struct {
			result1 []*coupon.Coupon
			result2 error
		})
	}
	fake.getCouponsReturnsOnCall[i] = struct {
		result1 []*coupon.Coupon
		result2 error
	}{result1, result2}
}

func (fake *FakeCouponService) UpdateCoupon(arg1 coupon.Coupon) error {
	fake.updateCouponMutex.Lock()
	ret, specificReturn := fake.updateCouponReturnsOnCall[len(fake.updateCouponArgsForCall)]
	fake.updateCouponArgsForCall = append(fake.updateCouponArgsForCall, struct {
		arg1 coupon.Coupon
	}{arg1})
	fake.recordInvocation("UpdateCoupon", []interface{}{arg1})
	fake.updateCouponMutex.Unlock()
	if fake.UpdateCouponStub != nil {
		return fake.UpdateCouponStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateCouponReturns
	return fakeReturns.result1
}

func (fake *FakeCouponService) UpdateCouponCallCount() int {
	fake.updateCouponMutex.RLock()
	defer fake.updateCouponMutex.RUnlock()
	return len(fake.updateCouponArgsForCall)
}

func (fake *FakeCouponService) UpdateCouponCalls(stub func(coupon.Coupon) error) {
	fake.updateCouponMutex.Lock()
	defer fake.updateCouponMutex.Unlock()
	fake.UpdateCouponStub = stub
}

func (fake *FakeCouponService) UpdateCouponArgsForCall(i int) coupon.Coupon {
	fake.updateCouponMutex.RLock()
	defer fake.updateCouponMutex.RUnlock()
	argsForCall := fake.updateCouponArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCouponService) UpdateCouponReturns(result1 error) {
	fake.updateCouponMutex.Lock()
	defer fake.updateCouponMutex.Unlock()
	fake.UpdateCouponStub = nil
	fake.updateCouponReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCouponService) UpdateCouponReturnsOnCall(i int, result1 error) {
	fake.updateCouponMutex.Lock()
	defer fake.updateCouponMutex.Unlock()
	fake.UpdateCouponStub = nil
	if fake.updateCouponReturnsOnCall == nil {
		fake.updateCouponReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCouponReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCouponService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCouponMutex.RLock()
	defer fake.createCouponMutex.RUnlock()
	fake.getCouponByIdMutex.RLock()
	defer fake.getCouponByIdMutex.RUnlock()
	fake.getCouponsMutex.RLock()
	defer fake.getCouponsMutex.RUnlock()
	fake.updateCouponMutex.RLock()
	defer fake.updateCouponMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCouponService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.CouponService = new(FakeCouponService)
